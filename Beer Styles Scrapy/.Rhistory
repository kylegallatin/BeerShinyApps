classic$feel = as.numeric(sub('\\|', '', classic$feel))
classic$date = as.POSIXct(classic$date, format = "%b %d,%Y")
g <- ggplot(classic, aes(x = date, y = taste, col = name)) +
geom_smooth()
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
classic
classic <- na.omit(classic)
runApp('~/Desktop/Scraping')
classic_mean <- classic %>% group_by(name) %>% summarise(mean = mean(taste))
classic_mean
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
x = "Budweiser" "Coors"
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
filter(classic, name == c("Budweiser", "Bud Light"))
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
colnames(classic)[1]
colnames(classic)[2]
colnames(classic)[2:5]
colnames(classic)[2:6]
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
colnames(classic)[2:6]
colnames(classic)[2:6]
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
library(readr)
americanAmber <- read_csv('~/Desktop/demo/americanAmber_redAle.csv')
View(americanAmber)
rep('American Amber', 5)
americanAmber$Style = rep('American Amber', nrow(americanAmber))
na.omit(americanAmber)
americanAmber = na.omit(americanAmber)
rm(list = busch)
rm(list = 'busch')
rm(list = 'bud')
rm(list = 'budLight')
setwd('Desktop/demo')
getwd()
setwd('Scraping')
setwd('.')
setwd('.')
setwd('.')
setwd('Desktop/demo')
getwd()
setwd('..')
getwd()
setwd('..')
setwd('demo')
americanAmber = read.csv('americanAmber.csv')
americanAmber = read.csv('americanAmber_redAle.csv')
americanAmber$Style = rep('American Amber', nrow(americanAmber))
americanBlackAle = read.csv('americanBlackAle.csv')
americanBlackAle$Style = rep('American Black Ale', nrow(americanBlackAle))
americanBlondeAle = read.csv('americanBlondeAle.csv')
americanBlondeAle$Style = rep('American Blonde Ale', nrow(americanBlondeAle))
americanBrownAle = read.csv('americanBrownAle.csv')
americanBrownAle$Style = rep('American Brown Ale', nrow(americanBrownAle))
americanDoubleIPA = read.csv('americanDouble_imperialIPA.csv')
americanDoubleIPA$Style = rep('American Double/Imperial IPA', nrow(americanDoubleIPA))
americanImperialStout = read.csv('americanDouble_imperialStout.csv')
americanImperialStout$Style = rep('American Double/Imperial Stout', nrow(americanImperialStout))
americanIPA = read.csv('americanIPA.csv')
americanIPA$Style = rep('American IPA', nrow(americanIPA))
americanPale_wheatAle = read.csv('americanPale_wheatAle.csv')
americanPale_wheatAle$Style = rep('American Pale/Wheat Ale', nrow(americanPale_wheatAle))
americanPaleAle = read.csv('americanPaleAle.csv')
americanPaleAle$Style = rep('American Pale Ale', nrow(americanPaleAle))
americanPorter = read.csv('americanPorter.csv')
americanPorter$Style = rep('American Porter', nrow(americanPorter))
americanStout = read.csv('americanStout.csv')
americanStout$Style = rep('American Stout', nrow(americanStout))
beerStyle = na.omit(rbind(americanAmber, americanBlackAle, americanBlondeAle,
americanBrownAle, americanDoubleIPA, americanImperialStout,
americanIPA, americanPale_wheatAle, americanPaleAle,
americanPorter, americanStout))
View(beerStyle)
beerStyle[''] <- NA
beerStyle[beerStyle == ''] <- NA
beerStyle = na.omit(beerStyle)
beerStyle$Ratings = as.numeric(sub(',', '', beerStyle$Ratings))
beerStyle %>% group_by(Style) %>% summarise(sum = sum(Ratings))
beerStyle %>% group_by(Style) %>% summarise(sum = mean(ABV))
as.numeric(beerStyle$ABV)
beerStyle$ABV
beerStyle$ABV = sub('?', NA, beerStyle$ABV)
beerStyle$ABV
beerStyle = rbind(americanAmber, americanBlackAle, americanBlondeAle,
americanBrownAle, americanDoubleIPA, americanImperialStout,
americanIPA, americanPale_wheatAle, americanPaleAle,
americanPorter, americanStout)
beerStyle[beerStyle == ''] <- NA
beerStyle = na.omit(beerStyle)
beerStyle$Ratings = as.numeric(sub(',', '', beerStyle$Ratings))
beerStyle$ABV = sub('\\?', NA, beerStyle$ABV)
beerStyle$ABV
as.numeric(beerStyle$ABV)
beertStyle$ABV = as.numeric(beerStyle$ABV)
beerStyle$ABV = as.numeric(beerStyle$ABV)
beerStyle %>% group_by(Style) %>% summarise(sum = mean(ABV))
na.omit(beerStyle) %>% group_by(Style) %>% summarise(sum = mean(ABV))
plot(beerStyle$ABV, beerStyle$Avg)
sum(beerStyle$ABV == 0)
beerStyle$ABV == 0
na.omit(beerStyle$ABV) == 0
sum(na.omit(beerStyle$ABV) == 0)
min(na.omit(beerStyle$ABV))
abline(lm(beerStyle$ABV, beerStyle$Avg))
abline(lm(beerStyle$ABV ~ beerStyle$Avg))
abline(lm(beerStyle$Avg ~ beerStyle$ABV))
plot(beerStyle$ABV, beerStyle$Avg)
abline(lm(beerStyle$Avg ~ beerStyle$ABV))
ggplot(beerStyle, aes(ABV, Avg)) + geom_point() + geom_abline(lm(beerStyle$Avg ~ beerStyle$ABV))
ggplot(beerStyle, aes(ABV, Avg)) + geom_point() + geom_abline(aes(lm(beerStyle$Avg ~ beerStyle$ABV)))
ggplot(beerStyle, aes(ABV, Avg)) + geom_point()# + geom_abline(aes(lm(beerStyle$Avg ~ beerStyle$ABV)))
lm(beerStyle$Avg ~ beerStyle$ABV)
reg = lm(beerStyle$Avg ~ beerStyle$ABV)
class(beerStyle$ABV)
class(beerStyle$Avg)
beerStyle$Avg = as.numeric(beerStyle$Avg)
beerStyle = rbind(americanAmber, americanBlackAle, americanBlondeAle,
americanBrownAle, americanDoubleIPA, americanImperialStout,
americanIPA, americanPale_wheatAle, americanPaleAle,
americanPorter, americanStout)
beerStyle[beerStyle == ''] <- NA
beerStyle = na.omit(beerStyle)
beerStyle$Ratings = as.numeric(sub(',', '', beerStyle$Ratings))
beerStyle$ABV = sub('\\?', NA, beerStyle$ABV)
beerStyle$ABV = as.numeric(beerStyle$ABV)
as.numeric(beerStyle$Avg)
beerStyle$Avg
sub('-', NA, beerStyle$Avg)
beerStyle$Avg = sub('-', NA, beerStyle$Avg)
as.numeric(beerStyle$Avg)
beerStyle$Avg = as.numeric(beerStyle$Avg)
ggplot(beerStyle, aes(ABV, Avg)) + geom_point() + geom_abline()
reg = lm(beerStyle$Avg ~ beerStyle$ABV)
ggplot(beerStyle, aes(ABV, Avg)) + geom_point() + geom_abline(reg)
ggplot(beerStyle, aes(ABV, Avg)) + geom_point() + geom_abline(aes(reg))
reg
reg[1]
reg$coefficients[1]
lm(beerStyle$Avg ~ beerStyle$ABV)
summary(lm(beerStyle$Avg ~ beerStyle$ABV))
plot(beerStyle$ABV, beerStyle$Avg)
abline(lm(beerStyle$Avg ~ beerStyle$ABV))
ggplot(beerStyle, aes(ABV, Avg)) + geom_point() + geom_abline(intercept = 3.3, slope = 0.07)
summary(lm(beerStyle$Avg ~ beerStyle$ABV))
ggplot(beerStyle, aes(ABV, Avg, col = Style)) + geom_point() +
geom_abline(intercept = 3.3, slope = 0.07) +
# coors <- read.csv("coors.csv")
# coorsLight <- read.csv("coorsLight.csv")
# bud = read.csv("bud.csv")
# budLight = read.csv("budLight.csv")
# busch = read.csv("busch.csv")
# buschLight = read.csv("buschLight.csv")
# nattyIce = read.csv("nattyIce.csv")
# nattyLight = read.csv("nattyLight.csv")
# highLife = read.csv("miller_highlife.csv")
classic = rbind(coors, coorsLight, bud,
budLight, busch, buschLight,
highLife, nattyIce, nattyLight)
ggplot(beerStyle, aes(ABV, Avg, col = Style)) + geom_point() +
geom_abline(intercept = 3.3, slope = 0.07)
ggplot(beerStyle, aes(x = Avg)) + geom_boxplot()
ggplot(beerStyle, aes(x = Avg)) + geom_boxplot(stat = 'identity')
ggplot(beerStyle, aes(x = Avg)) + geom_boxplot()
t <- ggplot(classic, aes(x = name, y = taste)) +
geom_boxplot() +
theme_minimal()
t
ggplot(beerStyle, aes(x = Style, y = Avg)) + geom_boxplot()
ggplot(beerStyle, aes(x = Style, y = Avg)) + geom_boxplot() +
coord_flip() +
theme_minimal()
ggplot(beerStyle, aes(x = Style)) + geom_histogram(stat = 'count')
ggplot(beerStyle, aes(x = Style)) + geom_histogram(stat = 'count') +
coord_flip
ggplot(beerStyle, aes(x = Style)) + geom_histogram(stat = 'count') +
coord_flip()
TukeyHSD(aov(beerStyle$Style ~ beerStyle$Avg))
TukeyHSD(aov(beerStyle$Avg ~ beerStyle$Style))
summary(aov(beerStyle$Avg ~ beerStyle$Style))
t.test(mean(beerStyle$Avg[beerStyle$Style == 'American IPA')], mean(beerStyle$Avg))
t.test(mean(beerStyle$Avg[beerStyle$Style == 'American IPA']), mean(beerStyle$Avg))
t.test(mean(beerStyle$Avg[beerStyle$Style == 'American IPA']), beerStyle$Avg)
t.test(beerStyle$Avg, mean(beerStyle$Avg[beerStyle$Style == 'American IPA']))
t.test(beerStyle$Avg, mu = mean(beerStyle$Avg[beerStyle$Style == 'American IPA']))
mean(beerStyle$Avg[beerStyle$Style == 'American IPA'])
mean(na.omit(beerStyle$Avg[beerStyle$Style == 'American IPA']))
t.test(beerStyle$Avg, mu = mean(na.omit(beerStyle$Avg[beerStyle$Style == 'American IPA'])))
t.test(beerStyle$Avg, mu = mean(na.omit(beerStyle$Avg[beerStyle$Style == 'American Stout'])))
t.test(beerStyle$Avg, mu = mean(na.omit(beerStyle$Avg[beerStyle$Style == 'American Amber'])))
t.test(beerStyle$Avg[beerStyle$Style == 'American Blonde Ale'], mu = mean(na.omit(beerStyle$Avg)))
t.test(beerStyle$Avg[beerStyle$Style == 'American IPA'], mu = mean(na.omit(beerStyle$Avg)))
t.test(beerStyle$Avg[beerStyle$Style == 'American Brown Ale'], mu = mean(na.omit(beerStyle$Avg)))
t.test(beerStyle$Avg[beerStyle$Style == 'American Black Ale'], mu = mean(na.omit(beerStyle$Avg)))
t.test(beerStyle$Avg[beerStyle$Style == 'American Pale Ale'], mu = mean(na.omit(beerStyle$Avg)))
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
unique(classic$name)
runApp('~/Desktop/Scraping')
classic[classic == 'look']
classic[colnames(classic) == 'look']
head(classic[colnames(classic) == 'look'])
cbind(classic[,6],classic[colnames(classic) == parameter()])
cbind(classic[,6], classic[colnames(classic) == look])
cbind(classic[,6], classic[colnames(classic) == 'look'])
cbind(classic[,5], classic[colnames(classic) == 'look'])
cbind(classic[,7], classic[colnames(classic) == 'look'])
cbind(classic[,8], classic[colnames(classic) == 'look'])
test = cbind(classic[,8], classic[colnames(classic) == 'look'])
test %>% group_by(name) %>% sumarise(mean())
head(cbind(classic[,8], classic[colnames(classic) == 'look']))
head(cbind(classic$name, classic[colnames(classic) == 'look']))
colnames(test) <- c('name', 'look')
head(test)
test %>% group_by(name) %>% sumarise(mean())
test %>% group_by(name) %>% summarise(mean())
test %>% group_by(name) %>% summarise(mean = mean())
test %>% group_by(name) %>% summarise(mean = mean(look))
test %>% group_by(name) %>% summarise(mean = mean([,2]))
test %>% group_by(name) %>% summarise(mean = mean(2))
test %>% group_by(name) %>% summarise(mean = mean(test[colnames = 'look']))
test %>% group_by(name) %>% summarise(mean = mean(test[colnames(test) = 'look']))
test %>% group_by(name) %>% summarise(mean = mean(test[colnames(test) == 'look']))
test %>% group_by(name) %>% summarise_each(funs(mean))
test %>% group_by(name) %>% summarise_each(funs(mean))[,2]
means = test %>% group_by(name) %>% summarise_each(funs(mean))
means[,2]
max(means[,2])
means$name
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
t <- ggplot(classic, aes(x = name, y = taste)) +
geom_boxplot() +
theme_minimal()
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
mean(classic[colnames(classic == 'look')])
classic[colnames(classic == 'look')]
classic[colnames(classic) == 'look']
mean(classic[colnames(classic) == 'look'])
mean(na.omit(classic[colnames(classic) == 'look']))
mean(as.vector(na.omit(classic[colnames(classic) == 'look'])))
mean(classic$look)
mean(classic['look'])
colnames(classic)
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
test
test %>% group_by(name) %>% summarise_each(funs(mean))
stats = test %>% group_by(name) %>% summarise_each(funs(mean))
stats[,2]
max(stats[,2])
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
?mean
options(digits = 4)
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
options(digits = 4)
4.44444
mean(5,6)
mean(5,6,7)
mean(c(5,6))
mean(c(5,6,300))
options(digits = 5)
mean(c(5,6,300))
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
runApp('~/Desktop/Scraping')
ggplot(beerStyle, aes(ABV, Avg, col = Style)) + geom_point() +
geom_abline(intercept = 3.3, slope = 0.07)
ggplot(beerStyle, aes(x = Style, y = Avg)) + geom_boxplot() +
coord_flip() +
theme_minimal()
ggplot(beerStyle, aes(x = Style)) + geom_histogram(stat = 'count') +
coord_flip()
ggplot(beerStyle, aes(x = Style, col = 'brewery')) + geom_histogram(stat = 'count') +
coord_flip()
ggplot(beerStyle, aes(x = Style, col = brewery)) + geom_histogram(stat = 'count') +
coord_flip()
View(beerStyle)
ggplot(beerStyle, aes(x = Style, col = Brewery)) + geom_histogram(stat = 'count') +
coord_flip()
ggplot(beerStyle, aes(x = Style, col = Bros)) + geom_histogram(stat = 'count') +
coord_flip()
ggplot(beerStyle, aes(x = Style, fill = Bros)) + geom_histogram(stat = 'count') +
coord_flip()
beerStyle_highRatings = beerStyle[Ratings > 1000]
beerStyle_highRatings = beerStyle[beerStyle$Ratings > 1000]
beerStyle_highRatings = beerStyle[beerStyle$Ratings > 1000,]
ggplot(beerStyle_highRatings, aes(x = Style, fill = Bros)) + geom_histogram(stat = 'count') +
coord_flip()
ggplot(beerStyle_highRatings, aes(x = Style, fill = Brewery)) + geom_histogram(stat = 'count') +
coord_flip()
ggplot(beerStyle_highRatings, aes(x = Style, fill = Bros)) + geom_histogram(stat = 'count') +
coord_flip()
ggplot(beerStyle_highRatings, aes(x = Style, y = Avg)) + geom_boxplot() +
coord_flip() +
theme_minimal()
ggplot(beerStyle_highRatings, aes(ABV, Avg, col = Style)) + geom_point() +
geom_abline(intercept = 3.3, slope = 0.07)
summary(lm(beerStyle$Avg ~ beerStyle$ABV))
summary(lm(beerStyle_highRatings$Avg ~ beerStyle_highRatings$ABV))
beerStyle[beerStyle$Ratings == max(beerStyle$Ratings)]
beerStyle[beerStyle$Ratings == max(beerStyle$Ratings),]
runApp('~/Desktop/beerStyle')
shinyUI(dashboardPage(
dashboardHeader(title = 'American Beer Styles'),
dashboardSidebar('Kyle Gallatin', image = 'handsome_man.jpg'),
dashboardBody()
))
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
tabItem(tabName = "ABV",
fluidRow(plotOutput("plot1")))
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
ggplot(beerStyle_highRatings, aes(x = Style, y = Avg)) + geom_boxplot() +
coord_flip() +
theme_minimal()
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
lm(beerStyle$Avg ~ beerStyle$ABV)
lm(beerStyle$Avg ~ beerStyle$ABV)[1]
lm(beerStyle$Avg ~ beerStyle$ABV)[1,1]
summary(lm(beerStyle$Avg ~ beerStyle$ABV)))
summary(lm(beerStyle$Avg ~ beerStyle$ABV))
lm(beerStyle$Avg ~ beerStyle$ABV)
test = lm(beerStyle$Avg ~ beerStyle$ABV)
test$model
test$coefficients
test$coefficients[1]
test$coefficients[1] * 2
test$coefficients[2]
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
test$qr
summary(test)
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
unique(beerStyle$Avg)
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
tabItem(tabName = "mReviews",
fluidRow(plotOutput("plot1"))),
tabItem(tabName = 'ABV',
fluidRow(plotOutput("plot2")),
fluidRow(textOutput('text'))),
tabItem(tabName = 'Avg',
fluidRow(plotOutput("plot3")),
fluidRow(textOutput('aov'))
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
output$plot1 <- renderPlot(
ggplot(avgRating()[!is.na(avgRating()$Avg),], aes(x = Style, fill = )) +
geom_histogram(stat = 'count') +
coord_flip()
)
ggplot(beerStyle_highRatings, aes(x = Style, fill = )) + geom_histogram(stat = 'count') +
coord_flip()
ggplot(beerStyle_highRatings, aes(x = Style, fill = n)) + geom_histogram(stat = 'count') +
coord_flip()
ggplot(beerStyle_highRatings, aes(x = Style, fill = total)) + geom_histogram(stat = 'count') +
coord_flip()
n
ggplot(beerStyle_highRatings, aes(x = Style, fill = n)) + geom_histogram(stat = 'count') +
coord_flip()
ggplot(beerStyle_highRatings, aes(x = Style, fill = NULL)) + geom_histogram(stat = 'count') +
coord_flip()
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
runApp('~/Desktop/beerStyle')
data.frame(lm(beerStyle$Avg ~ beerStyle$ABV))
data.frame(summarylm(beerStyle$Avg ~ beerStyle$ABV)))
data.frame(summary(lm(beerStyle$Avg ~ beerStyle$ABV)))
runApp('~/Desktop/Cheap Beer Shiny')
runApp('~/Desktop/Cheap Beer Shiny')
runApp('~/Desktop/Cheap Beer Shiny')
runApp('~/Desktop/Cheap Beer Shiny')
runApp('~/Desktop/Cheap Beer Shiny')
runApp('~/Desktop/Cheap Beer Shiny')
runApp('~/Desktop/Cheap Beer Shiny')
runApp('~/Desktop/Cheap Beer Shiny')
runApp('~/Desktop/Cheap Beer Shiny')
library(ggplot2)
library(dplyr)
library(MASS)
data(cats)
ggplot(cats, aes(x = Bwt, y = Hwt)) + geom_point()
plot(cats$Bwt, cats$Hwt)
beta1 = sum((cats$Bwt - mean(cats$Bwt)) * (cats$Hwt - mean(cats$Hwt))) / sum((cats$Bwt - mean(cats$Bwt)) ^ 2)
beta0 = mean(cats$Hwt) - beta1 * mean(cats$Bwt)
abline(beta0, beta1, lty = 2)
SE1 =  sqrt((sig^2)/sum((cats$Bwt-mean(cats$Hwt))^2))
high = beta1 + 2*SE1
low = beta0 + 2*SE1
SE1 =  sqrt((sig^2)/sum((cats$Bwt-mean(cats$Hwt))^2))
RSS = sum(residuals^2)
residuals = cats$Hwt - (beta0 + beta1*cats$Bwt)
sum(residuals)
plot(residuals)
RSS = sum(residuals^2)
n = length(residuals)
sig = sqrt(RSS/(n-2))
SE1 =  sqrt((sig^2)/sum((cats$Bwt-mean(cats$Hwt))^2))
high = beta1 + 2*SE1
low = beta0 + 2*SE1
high
low
newCat = data.frame(Hwt = min(cats$Hwt):max(cats$Hwt))
newCat
confidence = predict(model, cats$Hwt, interval='confidence')
confidence = predict(m, cats$Hwt, interval='confidence')
m = lm(Hwt ~ Bwt, cats)
confidence = predict(m, cats$Hwt, interval='confidence')
prediction = predict(m, cats$Hwt, interval='prediction')
confBand = predict(model, newCat, interval='confidence')
confBand = predict(m, newCat, interval='confidence')
confidence = predict(m, cats, interval='confidence')
prediction = predict(m, cats, interval='prediction')
confidence[,2]
confidence
lines(newCat$Hwt, confidence[,2])
lines(Cats$Hwt, confidence[,2])
lines(cats$Hwt, confidence[,2])
plot(cats$Hwt, cats$Bwt)
abline(beta0, beta1, lty = 2)
lines(cats$Hwt, confidence[,2])
abline(beta0, beta1, lty = 2)
lines(cats$Hwt, confidence[,2])
